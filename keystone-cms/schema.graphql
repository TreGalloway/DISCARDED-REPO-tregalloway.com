# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  description: String
  image: ImageFieldOutput
  slug: String
  publishedAt: DateTime
  status: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  slug: StringFilter
  publishedAt: DateTimeNullableFilter
  status: StringNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  slug: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input PostUpdateInput {
  title: String
  description: String
  image: ImageFieldInput
  slug: String
  publishedAt: DateTime
  status: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  description: String
  image: ImageFieldInput
  slug: String
  publishedAt: DateTime
  status: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Hero {
  id: ID!
  Name: String
  content: Hero_content_Document
}

type Hero_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input HeroWhereUniqueInput {
  id: ID
}

input HeroWhereInput {
  AND: [HeroWhereInput!]
  OR: [HeroWhereInput!]
  NOT: [HeroWhereInput!]
  id: IDFilter
  Name: StringFilter
}

input HeroOrderByInput {
  id: OrderDirection
  Name: OrderDirection
}

input HeroUpdateInput {
  Name: String
  content: JSON
}

input HeroUpdateArgs {
  where: HeroWhereUniqueInput!
  data: HeroUpdateInput!
}

input HeroCreateInput {
  Name: String
  content: JSON
}

type Newsletter {
  id: ID!
  title: String
  description: String
  content: Newsletter_content_Document
}

type Newsletter_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input NewsletterWhereUniqueInput {
  id: ID
}

input NewsletterWhereInput {
  AND: [NewsletterWhereInput!]
  OR: [NewsletterWhereInput!]
  NOT: [NewsletterWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
}

input NewsletterOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input NewsletterUpdateInput {
  title: String
  description: String
  content: JSON
}

input NewsletterUpdateArgs {
  where: NewsletterWhereUniqueInput!
  data: NewsletterUpdateInput!
}

input NewsletterCreateInput {
  title: String
  description: String
  content: JSON
}

type Guide {
  id: ID!
  title: String
  description: String
  publishedAt: DateTime
  status: String
  content: Guide_content_Document
}

type Guide_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input GuideWhereUniqueInput {
  id: ID
}

input GuideWhereInput {
  AND: [GuideWhereInput!]
  OR: [GuideWhereInput!]
  NOT: [GuideWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishedAt: DateTimeNullableFilter
  status: StringNullableFilter
}

input GuideOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input GuideUpdateInput {
  title: String
  description: String
  publishedAt: DateTime
  status: String
  content: JSON
}

input GuideUpdateArgs {
  where: GuideWhereUniqueInput!
  data: GuideUpdateInput!
}

input GuideCreateInput {
  title: String
  description: String
  publishedAt: DateTime
  status: String
  content: JSON
}

type Tool {
  id: ID!
  Name: String
  description: String
  content: Tool_content_Document
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Tool_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ToolWhereUniqueInput {
  id: ID
}

input ToolWhereInput {
  AND: [ToolWhereInput!]
  OR: [ToolWhereInput!]
  NOT: [ToolWhereInput!]
  id: IDFilter
  Name: StringFilter
  description: StringFilter
  tags: TagManyRelationFilter
}

input ToolOrderByInput {
  id: OrderDirection
  Name: OrderDirection
  description: OrderDirection
}

input ToolUpdateInput {
  Name: String
  description: String
  content: JSON
  tags: TagRelateToManyForUpdateInput
}

input ToolUpdateArgs {
  where: ToolWhereUniqueInput!
  data: ToolUpdateInput!
}

input ToolCreateInput {
  Name: String
  description: String
  content: JSON
  tags: TagRelateToManyForCreateInput
}

type Gear {
  id: ID!
  title: String
  description: String
  publishedAt: DateTime
  status: String
  content: Gear_content_Document
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Gear_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input GearWhereUniqueInput {
  id: ID
}

input GearWhereInput {
  AND: [GearWhereInput!]
  OR: [GearWhereInput!]
  NOT: [GearWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishedAt: DateTimeNullableFilter
  status: StringNullableFilter
  tags: TagManyRelationFilter
}

input GearOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input GearUpdateInput {
  title: String
  description: String
  publishedAt: DateTime
  status: String
  content: JSON
  tags: TagRelateToManyForUpdateInput
}

input GearUpdateArgs {
  where: GearWhereUniqueInput!
  data: GearUpdateInput!
}

input GearCreateInput {
  title: String
  description: String
  publishedAt: DateTime
  status: String
  content: JSON
  tags: TagRelateToManyForCreateInput
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  gear(where: GearWhereInput! = {}, orderBy: [GearOrderByInput!]! = [], take: Int, skip: Int! = 0): [Gear!]
  gearCount(where: GearWhereInput! = {}): Int
  tools(where: ToolWhereInput! = {}, orderBy: [ToolOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tool!]
  toolsCount(where: ToolWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  gear: GearManyRelationFilter
  tools: ToolManyRelationFilter
}

input GearManyRelationFilter {
  every: GearWhereInput
  some: GearWhereInput
  none: GearWhereInput
}

input ToolManyRelationFilter {
  every: ToolWhereInput
  some: ToolWhereInput
  none: ToolWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
  gear: GearRelateToManyForUpdateInput
  tools: ToolRelateToManyForUpdateInput
}

input GearRelateToManyForUpdateInput {
  disconnect: [GearWhereUniqueInput!]
  set: [GearWhereUniqueInput!]
  create: [GearCreateInput!]
  connect: [GearWhereUniqueInput!]
}

input ToolRelateToManyForUpdateInput {
  disconnect: [ToolWhereUniqueInput!]
  set: [ToolWhereUniqueInput!]
  create: [ToolCreateInput!]
  connect: [ToolWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
  gear: GearRelateToManyForCreateInput
  tools: ToolRelateToManyForCreateInput
}

input GearRelateToManyForCreateInput {
  create: [GearCreateInput!]
  connect: [GearWhereUniqueInput!]
}

input ToolRelateToManyForCreateInput {
  create: [ToolCreateInput!]
  connect: [ToolWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createHero(data: HeroCreateInput!): Hero
  createHeroes(data: [HeroCreateInput!]!): [Hero]
  updateHero(where: HeroWhereUniqueInput!, data: HeroUpdateInput!): Hero
  updateHeroes(data: [HeroUpdateArgs!]!): [Hero]
  deleteHero(where: HeroWhereUniqueInput!): Hero
  deleteHeroes(where: [HeroWhereUniqueInput!]!): [Hero]
  createNewsletter(data: NewsletterCreateInput!): Newsletter
  createNewsletters(data: [NewsletterCreateInput!]!): [Newsletter]
  updateNewsletter(where: NewsletterWhereUniqueInput!, data: NewsletterUpdateInput!): Newsletter
  updateNewsletters(data: [NewsletterUpdateArgs!]!): [Newsletter]
  deleteNewsletter(where: NewsletterWhereUniqueInput!): Newsletter
  deleteNewsletters(where: [NewsletterWhereUniqueInput!]!): [Newsletter]
  createGuide(data: GuideCreateInput!): Guide
  createGuides(data: [GuideCreateInput!]!): [Guide]
  updateGuide(where: GuideWhereUniqueInput!, data: GuideUpdateInput!): Guide
  updateGuides(data: [GuideUpdateArgs!]!): [Guide]
  deleteGuide(where: GuideWhereUniqueInput!): Guide
  deleteGuides(where: [GuideWhereUniqueInput!]!): [Guide]
  createTool(data: ToolCreateInput!): Tool
  createTools(data: [ToolCreateInput!]!): [Tool]
  updateTool(where: ToolWhereUniqueInput!, data: ToolUpdateInput!): Tool
  updateTools(data: [ToolUpdateArgs!]!): [Tool]
  deleteTool(where: ToolWhereUniqueInput!): Tool
  deleteTools(where: [ToolWhereUniqueInput!]!): [Tool]
  createGear(data: GearCreateInput!): Gear
  createGears(data: [GearCreateInput!]!): [Gear]
  updateGear(where: GearWhereUniqueInput!, data: GearUpdateInput!): Gear
  updateGears(data: [GearUpdateArgs!]!): [Gear]
  deleteGear(where: GearWhereUniqueInput!): Gear
  deleteGears(where: [GearWhereUniqueInput!]!): [Gear]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  heroes(where: HeroWhereInput! = {}, orderBy: [HeroOrderByInput!]! = [], take: Int, skip: Int! = 0): [Hero!]
  hero(where: HeroWhereUniqueInput!): Hero
  heroesCount(where: HeroWhereInput! = {}): Int
  newsletters(where: NewsletterWhereInput! = {}, orderBy: [NewsletterOrderByInput!]! = [], take: Int, skip: Int! = 0): [Newsletter!]
  newsletter(where: NewsletterWhereUniqueInput!): Newsletter
  newslettersCount(where: NewsletterWhereInput! = {}): Int
  guides(where: GuideWhereInput! = {}, orderBy: [GuideOrderByInput!]! = [], take: Int, skip: Int! = 0): [Guide!]
  guide(where: GuideWhereUniqueInput!): Guide
  guidesCount(where: GuideWhereInput! = {}): Int
  tools(where: ToolWhereInput! = {}, orderBy: [ToolOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tool!]
  tool(where: ToolWhereUniqueInput!): Tool
  toolsCount(where: ToolWhereInput! = {}): Int
  gears(where: GearWhereInput! = {}, orderBy: [GearOrderByInput!]! = [], take: Int, skip: Int! = 0): [Gear!]
  gear(where: GearWhereUniqueInput!): Gear
  gearsCount(where: GearWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
